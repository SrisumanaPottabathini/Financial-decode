# -*- coding: utf-8 -*-
"""Financial Decoder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OoFQ3r4Pp3vYy8Kim6mFfwZazTp3iRfw
"""

import yfinance as yf
import pandas as pd
import numpy as np

def get_stock_data(ticker, period="1y"):
    """Fetches stock data using yfinance."""
    try:
      data = yf.download(ticker, period=period)
      return data
    except Exception as e:
        print(f"Error fetching data for {ticker}: {e}")
        return None

def calculate_simple_moving_average(data, window=20):
    """Calculates the simple moving average."""
    if data is None or len(data) < window:  # Handle cases where data is insufficient
        return None
    sma = data['Close'].rolling(window=window).mean()
    return sma

def calculate_rsi(data, period=14):
    """Calculates the Relative Strength Index (RSI)."""
    if data is None or len(data) < period:
        return None

    delta = data['Close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)

    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def analyze_stock(ticker, period="1y"):
    """Analyzes a stock and prints some basic information."""
    data = get_stock_data(ticker, period)
    if data is None:
        return

    print(f"\n--- Analysis for {ticker} ---")
    print(data.head())  # Display first few rows of data

    sma = calculate_simple_moving_average(data)
    if sma is not None:
        print("\nSimple Moving Average (20 days):")
        print(sma.tail())  # Display the latest SMA values
    else:
        print("\nNot enough data to calculate Simple Moving Average")

    rsi = calculate_rsi(data)
    if rsi is not None:
      print("\nRelative Strength Index (14 days):")
      print(rsi.tail())
    else:
        print("\nNot enough data to calculate RSI")


    # Example: Basic trading signal (very simplified)
    if sma is not None and rsi is not None and len(sma) > 0 and len(rsi) > 0 :
        last_close = data['Close'].iloc[-1]
        last_sma = sma.iloc[-1]
        last_rsi = rsi.iloc[-1].item()

        # Convert last_close and last_sma to numeric values if they are Series
        last_close = last_close.item() if isinstance(last_close, pd.Series) else last_close
        last_sma = last_sma.item() if isinstance(last_sma, pd.Series) else last_sma

        if last_close > last_sma and last_rsi < 30: # Example: Buy signal
            print("\nPotential Buy Signal (Simplified): Price above SMA and RSI below 30")
        elif last_close < last_sma and last_rsi > 70: # Example: Sell signal
            print("\nPotential Sell Signal (Simplified): Price below SMA and RSI above 70")
        else:
            print("\nNo clear signal based on this simple strategy.")
    else:
         print("\nCould not generate signals")

# Example usage:
tickers = ["AAPL", "MSFT", "GOOG"]  # Example stock symbols
for ticker in tickers:
    analyze_stock(ticker)


# You can also analyze a specific stock for a different time period.
analyze_stock("TSLA", "3mo") # Tesla data for the last 3 months